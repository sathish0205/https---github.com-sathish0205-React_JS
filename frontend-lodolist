import React, { useState, useEffect } from 'react';
import axios from 'axios';

const TodoApp = () => {
  const [todos, setTodos] = useState([]);
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [editingId, setEditingId] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const fetchTodos = async () => {
    setLoading(true);
    setError('');
    try {
      const response = await axios.get('http://localhost:3000/todos');
      setTodos(response.data);
    } catch (error) {
      setError('Error fetching todos');
      console.error('Error fetching todos:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchTodos();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    try {
      if (editingId) {
        await axios.put(`http://localhost:3000/todos/${editingId}`, { title, description });
      } else {
        await axios.post('http://localhost:3000/todos', { title, description });
      }
      fetchTodos();
      setTitle('');
      setDescription('');
      setEditingId(null);
    } catch (error) {
      setError('Error submitting todo');
      console.error('Error submitting todo:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (todo) => {
    setTitle(todo.title);
    setDescription(todo.description);
    setEditingId(todo._id);
  };

  const handleDelete = async (id) => {
    const confirmDelete = window.confirm("Are you sure you want to delete this todo?");
    
    if (confirmDelete) {
      setLoading(true);
      setError('');
      try {
        await axios.delete(`http://localhost:3000/todos/${id}`);
        fetchTodos(); 
        alert("Todo deleted successfully!"); // Success message
      } catch (error) {
        setError('Error deleting todo');
        console.error('Error deleting todo:', error);
      } finally {
        setLoading(false);
      }
    }
  };

  return (
    <div className="max-w-lg mx-auto p-4 bg-white rounded-lg shadow-md">
      <h1 className="text-2xl font-bold text-center mb-4">Todo List</h1>
      {error && <div className="text-red-500 text-center mb-4">{error}</div>}
      <form onSubmit={handleSubmit} className="flex flex-col mb-4">
        <input
          type="text"
          placeholder="Title"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          required
          className="p-2 border border-gray-300 rounded mb-2"/>
        <input
          type="text"
          placeholder="Description"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          required
          className="p-2 border border-gray-300 rounded mb-2"
        />
        <button
          type="submit"
          disabled={loading}
          className="bg-blue-500 text-white py-2 rounded hover:bg-blue-600 transition"
        >
          {loading ? 'Processing...' : (editingId ? 'Update' : 'Add')} Todo
        </button>
      </form>
      {loading ? (
        <p>Loading...</p>
      ) : (
        <ul>
          {todos.map((todo) => (
            <li key={todo._id} className="flex justify-between items-center border-b py-2">
              <div>
                <h3 className="font-semibold">{todo.title}</h3>
                <p className="text-gray-600">{todo.description}</p>
              </div>
              <div>
                <button
                  onClick={() => handleEdit(todo)}
                  className="bg-yellow-500 text-white px-2 py-1 rounded hover:bg-yellow-600 transition mr-2"
                >
                  Edit
                </button>
                <button
                  onClick={() => handleDelete(todo._id)}
                  className="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600 transition"
                >
                  Delete
                </button>
              </div>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};

export default TodoApp;
